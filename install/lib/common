#!/bin/bash

# Constants 
declare -r LOG_FILE='/var/log/install.log'
declare -r OVERLAYS_DIR='/lib/live/mount/medium/overlays'
declare -r COMMANDS_DIR='/lib/live/mount/medium/commands'
declare -r CHROOT_DIR='/mnt/newfs'

###############################################
# 
# This is called to clean up the enviroment 
#
###############################################
function clean {
  log_message "Cleanup has been initiated"

  # Set the orginal IFS
  return_ifs

  # Release the swap partion 
  run_command "swapoff ${SWAP_PARTITION}"

  # chroot mounts
  run_chroot_command ${CHROOT_DIR} "umount /dev/pts"
  run_chroot_command ${CHROOT_DIR} "umount /sys"
  run_chroot_command ${CHROOT_DIR} "umount /proc"
  run_command "umount ${CHROOT_DIR}/dev"

  # Unmount anything we have mounted
  for mount in $(mount | tac | grep "/mnt" | awk '{print $3}'); do
    run_command "umount ${mount}"
  done

}


###############################################
# 
# This is what we will run on ctrl-c or errors
#
###############################################
function exit_clean {
  exit_code=$1

  clean

  exit $exit_code
}


################################################## 
# Creates a progress bar for function running 
# Globals:
#   TOTAL_TASKS
#   CURRENT_TASK
# Arguments:
#   title
#   function: Function that will be executed inside the progress bar
#   args: Array of args to be passed to the function
# Returns:
#   None
################################################## 
function progress_bar {
  local title=$1
  local function=$2
  shift 2
  local args=("$@")

  dialog --title ${title} --gauge "Copying file..." 10 75 < <(
    $function ${args[@]}

    update_progress_bar "${title} Complete"
 
  )

  unset TOTAL_TASKS
  
}

################################################## 
# This sets up everything the progress bar needs to run 
# Globals:
#   CURRENT_TASK
#   TOTAL_TASK
# Arguments:
#   file File where the function lives 
#   function Name of the function 
# Returns:
#   None
################################################## 
function progress_bar_init {
  local file=$1
  local function=$2
 
  CURRENT_TASK=0
  TOTAL_TASKS=$(cat $file | \
    awk "BEGIN{ found=0} /function $function/{found=1} {if (found) print }" | \
    awk 'BEGIN{ found=1} /^}/{found=0} {if (found) print }' | grep "run_" | wc -l \
  )

}


################################################## 
# Updates progess bar 
# Globals:
#   CURRENT_TASK
#   TOTAL_TASKS 
# Arguments:
#   percent
#   description 
# Returns:
#   None
################################################## 
function update_progress_bar {
  local description=$1
  local percent=0

  # Update the progress bar 
  if [[ ! -z $TOTAL_TASKS ]]; then
    percent=$((100 * $CURRENT_TASK / $TOTAL_TASKS))
    # Cover ourselves for missing functions
    if [ ${percent} -gt 100 ]; then
      percent=100
    fi 

    CURRENT_TASK=$(($CURRENT_TASK + 1))

    cat <<EOF
XXX
$percent
$description
XXX
EOF
    
  fi
  
}


################################################## 
# Checks the return status of commands
# Globals:
#   EXIT_FUNCTION: The function called for cleanup 
# Arguments:
#   exit_code: Exit code being checked
#   description: Description of what was done while getting the exit code
# Returns:
#   None
################################################## 
function check_return {
  local exit_code=$1
  local description=$2

  # Exit code that is not 0 fails 
  if [ $1 -ne 0 ]; then
    echo "FAIL: $2" >> $LOG_FILE
    echo "FAIL: $2"

    # If an exit function exists and ignore errors is not set run the exit function 
    if [[ -z ${IGNORE_ERRORS} ]]; then
      IGNORE_ERRORS=1
      log_message "IGNORE_ERRORS set to ${IGNORE_ERRORS}"
      exit_clean 

    fi
      
  else
    :
    echo "PASS: $2" >> $LOG_FILE

  fi
}

################################################## 
# Runs a command and checks the status 
# Globals:
#   None 
# Arguments:
#   cmd: Command to execute 
#   description: Description of what this command is doing
# Returns:
#   None
################################################## 
function run_command {
  local cmd=$1 
  local description=$2

  update_progress_bar $description

  /bin/dash -c "${cmd}" &>> $LOG_FILE
  local retval=$? 

  if [[ -z ${description} ]]; then
    check_return "${retval}" "${cmd}"
 
  else
    check_return "${retval}" "${description}" 

  fi

}


################################################## 
# Runs a command inside a chroot and checks the status 
# Globals:
#   None 
# Arguments:
#   chroot: Location of the chroot
#   cmd: Command to execute 
#   description: Description of what this command is doing
# Returns:
#   None
################################################## 
function run_chroot_command {
  local chroot=$1
  local cmd=$2
  local description=$3

  update_progress_bar $description

  chroot ${chroot} /bin/dash -c "${cmd}" &>> $LOG_FILE
  local retval=$?

  if [[ -z ${description} ]]; then
    check_return "${retval}" "${cmd}"

  else
    check_return "${retval}" "${description}"
  
  fi

}


################################################## 
# Checks for root priviledges and exit without them 
# Globals:
#   None 
# Arguments:
#   None
# Returns:
#   None
################################################## 
function check_root {

  if [ $(whoami) != 'root' ]; then
    echo "You must have root privilege to execute this script!"
    exit 2

  fi
}


################################################## 
# Send message to log 
# Globals:
#   None 
# Arguments:
#   message 
# Returns:
#   None
################################################## 
function log_message {
  local message=$1

  echo "$message" >> $LOG_FILE
}


################################################## 
# Sets the IFS for the script 
# Globals:
#   IFS
#   IFS_DEFAULT
# Arguments:
#   IFS: Value to change IFS to 
# Returns:
#   None
################################################## 
function set_ifs {

  IFS=$1

}

################################################## 
# Returns the IFS to default 
# Globals:
#   IFS
# Arguments:
#   None 
# Returns:
#   None
################################################## 
function return_ifs {

  if [[ ! -z ${IFS_DEFAULT} ]]; then
    IFS=${IFS_DEFAULT}
    unset IFS_DEFAULT
  fi

}


